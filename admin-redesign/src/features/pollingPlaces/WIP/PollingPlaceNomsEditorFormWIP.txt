import { yupResolver } from '@hookform/resolvers/yup';
import { Approval, Delete, Save, Star, StarBorder } from '@mui/icons-material';
import { LoadingButton } from '@mui/lab';
import {
	Alert,
	AppBar,
	Box,
	Button,
	Card,
	CardContent,
	CardHeader,
	Dialog,
	DialogActions,
	DialogTitle,
	FormControl,
	FormGroup,
	IconButton,
	List,
	ListItem,
	ListItemButton,
	ListItemIcon,
	ListItemText,
	Snackbar,
	Toolbar,
	Typography,
	styled,
} from '@mui/material';
import { isEmpty, isEqual } from 'lodash-es';
import React, { useCallback, useEffect, useState } from 'react';
import { Controller, type SubmitHandler, useForm } from 'react-hook-form';
import { FormFieldValidationError } from '../../../app/forms/formHelpers';
import { pollingPlaceNomsFormValidationSchema } from '../../../app/forms/pollingPlaceForm';
import type {
	PendingStall,
	PollingPlaceWithPendingStall,
	StallFoodOptions,
	UnofficialPollingPlaceWithPendingStall,
} from '../../../app/services/stalls';
import TextFieldWithout1Password from '../../../app/ui/textFieldWithout1Password';
import { mapaThemePrimaryGrey } from '../../../app/ui/theme';
import { getFieldIcon } from '../../pendingStalls/PendingStallsPollingPlaceStallsList';
import { getCountOfExistingStallsIcon } from '../../pendingStalls/pendingStallsHelpers';
import PollingPlaceNomsEditorFormNomsSelector from '../PollingPlaceNomsEditorFormNomsSelector';
import { getNomsDescriptiveText } from '../pollingPlaceHelpers';
import { isStallATipOff } from '../pollingPlaceStallsHelpers';
import type { IPollingPlace, IPollingPlaceStallModifiableProps } from '../pollingPlacesInterfaces';

const PageWrapper = styled('div')(({ theme }) => ({
	paddingTop: theme.spacing(2),
}));

// @TODO Why?
const StyledListItemIcon = styled(ListItemIcon)(({ theme }) => ({
	marginTop: theme.spacing(0.25),
	paddingLeft: theme.spacing(1),
}));

const StyledCard = styled(Card)(({ theme }) => ({
	marginBottom: theme.spacing(2),
}));

const StyledCardHeader = styled(CardHeader)(({ theme }) => ({
	paddingBottom: 0,
	'& .MuiCardHeader-title': { fontWeight: 500, fontSize: 17 },
}));

const StyledCardContent = styled(CardContent)(({ theme }) => ({
	paddingTop: 0,
	paddingBottom: '16px !important',
}));

export const getEditMergingListComponent = (
	pollingPlace: IPollingPlace | PollingPlaceWithPendingStall | UnofficialPollingPlaceWithPendingStall,
	fieldName: keyof PendingStall,
) => {
	const getText = (s: PendingStall, fieldName: keyof PendingStall) => {
		if (fieldName === 'noms') {
			return getNomsDescriptiveText(s[fieldName]);
		}

		if (fieldName in s && typeof s[fieldName] === 'string') {
			return s[fieldName] || <em>No value provided</em>;
		}

		return undefined;
	};

	return (
		<React.Fragment>
			{/* <Typography gutterBottom variant="h6" component="div" sx={{ mt: 2, mb: 2, fontSize: 18 }}>
				{fieldName}
			</Typography> */}

			<List sx={{ ml: 1, mb: 1, maxWidth: 350 }}>
				{'pending_stalls' in pollingPlace &&
					pollingPlace.pending_stalls
						?.filter((s) => isStallATipOff(s) === false)
						.map((s, idx) => (
							<ListItem
								key={s.id}
								disablePadding
								// secondaryAction={<Button variant="contained" startIcon={<Approval />} />}
								secondaryAction={
									<IconButton edge="end" aria-label="delete">
										<Approval sx={{ color: mapaThemePrimaryGrey }} />
										{/* <ContentPasteGo /> */}
										{/* <MoveDown /> */}
									</IconButton>
								}
								/* onClick={() => onChooseElection(election)} */
							>
								<StyledListItemIcon>
									{/* <LooksOne sx={{ color: mapaThemePrimaryGrey }} /> */}
									{/* @TODO Naming */}
									{getCountOfExistingStallsIcon(idx + 1)}
								</StyledListItemIcon>

								<ListItemText
									primary={getText(s, fieldName)}
									// secondary={`Stall ${idx + 1}`}
								/>
							</ListItem>
						))}
			</List>
		</React.Fragment>
	);
};

export const doesFieldHaveEditsToMerge = (
	fieldName: keyof PendingStall,
	pollingPlaceValue: string | number | StallFoodOptions | undefined,
	pollingPlace: IPollingPlace | PollingPlaceWithPendingStall | UnofficialPollingPlaceWithPendingStall,
) => {
	if ('pending_stalls' in pollingPlace) {
		return pollingPlace.pending_stalls.some((s) => {
			const pendingStallValue = fieldName in s ? s[fieldName] : undefined;

			if (fieldName === 'noms') {
				if (isEqual(pendingStallValue, pollingPlaceValue) === false) {
					return true;
				}
			} else {
				if (pendingStallValue !== pollingPlaceValue) {
					return true;
				}
			}
		});
	}

	return false;
};

const getFormFieldComponent = (
	fieldName: keyof PendingStall,
	fieldLabel: string,
	pollingPlace: IPollingPlace | PollingPlaceWithPendingStall | UnofficialPollingPlaceWithPendingStall,
	pollingPlaceFieldValue: string | number | StallFoodOptions | undefined,
	formControl: JSX.Element,
) =>
	doesFieldHaveEditsToMerge(fieldName, pollingPlaceFieldValue, pollingPlace) === true ? (
		<StyledCard>
			<StyledCardHeader avatar={getFieldIcon(fieldName)} title={fieldLabel} />

			<StyledCardContent>
				{doesFieldHaveEditsToMerge(fieldName, pollingPlaceFieldValue, pollingPlace) === true &&
					getEditMergingListComponent(pollingPlace, fieldName)}

				{formControl}
			</StyledCardContent>
		</StyledCard>
	) : (
		<Box sx={{ mb: 2 }}>{formControl}</Box>
	);

interface Props {
	pollingPlace: IPollingPlace | PollingPlaceWithPendingStall | UnofficialPollingPlaceWithPendingStall;
	onDoneCreatingOrEditing: (pollingPlaceId: number, stall: Partial<IPollingPlaceStallModifiableProps>) => void;
	isSaving: boolean;
	onDelete: (pollingPlaceId: number) => void;
	isDeleting: boolean;
}

export default function PollingPlaceNomsEditorForm(props: Props) {
	const { pollingPlace, onDoneCreatingOrEditing, isSaving, onDelete, isDeleting } = props;

	const {
		watch,
		setValue,
		handleSubmit,
		control,
		formState: { errors, isDirty },
	} = useForm<IPollingPlaceStallModifiableProps>({
		resolver: yupResolver(pollingPlaceNomsFormValidationSchema),
		defaultValues: {
			noms: pollingPlace.stall?.noms || {},
			name: pollingPlace.stall?.name || '',
			description: pollingPlace.stall?.description || '',
			opening_hours: pollingPlace.stall?.opening_hours || '',
			website: pollingPlace.stall?.website || '',
			extra_info: pollingPlace.stall?.extra_info || '',
			source: pollingPlace.stall?.source || '',
			favourited: pollingPlace.stall?.favourited || false,
		},
	});

	const { noms, favourited } = watch();

	// ######################
	// Food Options
	// ######################
	const onFoodOptionChange = useCallback(
		(foodOptions: StallFoodOptions) => setValue('noms', foodOptions, { shouldDirty: true }),
		[setValue],
	);
	// ######################
	// Food Options (End)
	// ######################

	// ######################
	// Favouriting
	// ######################
	const onClickFavourite = useCallback(
		() => setValue('favourited', !favourited, { shouldDirty: true }),
		[setValue, favourited],
	);
	// ######################
	// Favouriting (End)
	// ######################

	// ######################
	// Form Management
	// ######################
	const onDoneWithForm: SubmitHandler<IPollingPlaceStallModifiableProps> = useCallback(
		(data) => {
			if (isEmpty(data) === false) {
				// Unlike most other components like this, there's no need to include pollingPlace.stall as the base here because we're doing a genuine PATCH request.
				onDoneCreatingOrEditing(pollingPlace.id, data);
			}
		},
		[onDoneCreatingOrEditing, pollingPlace.id /*, pollingPlace.stall*/],
	);

	const onClickSubmit = useCallback(() => handleSubmit(onDoneWithForm)(), [handleSubmit, onDoneWithForm]);

	useEffect(() => {
		if (JSON.stringify(errors) !== '{}') {
			setIsErrorSnackbarShown(true);
		}
	}, [errors]);

	const [isErrorSnackbarShown, setIsErrorSnackbarShown] = useState(false);

	const onSnackbarClose = useCallback(() => setIsErrorSnackbarShown(false), []);
	// ######################
	// Form Management (End)
	// ######################

	// ######################
	// Delete Polling Place Noms
	// ######################
	const [isDeleteConfirmDialogShown, setIsDeleteConfirmDialogShown] = useState(false);

	const onClickDelete = useCallback(() => setIsDeleteConfirmDialogShown(true), []);

	const onConfirmDelete = useCallback(() => {
		onDelete(pollingPlace.id);
		setIsDeleteConfirmDialogShown(false);
	}, [onDelete, pollingPlace.id]);

	const onCancelDelete = useCallback(() => setIsDeleteConfirmDialogShown(false), []);
	// ######################
	// Delete Polling Place Noms (End)
	// ######################

	return (
		<PageWrapper>
			<form onSubmit={handleSubmit(onDoneWithForm)}>
				<PollingPlaceNomsEditorFormNomsSelector
					pollingPlace={pollingPlace}
					foodOptions={noms}
					onChange={onFoodOptionChange}
					errors={errors.noms}
					allowPasteOnTextField={false}
				/>

				{/* ######################
							Stall Details
					###################### */}
				<Typography
					gutterBottom
					variant="h6"
					component="div"
					sx={{ mt: 2, mb: 2, borderTop: `3px solid ${mapaThemePrimaryGrey}` }}
				>
					Stall details
				</Typography>

				{getFormFieldComponent(
					'name',
					'Stall name',
					pollingPlace,
					pollingPlace.stall?.name,
					<FormControl fullWidth={true} component="fieldset" variant="outlined">
						<FormGroup>
							<Controller
								name="name"
								control={control}
								render={({ field }) => (
									<TextFieldWithout1Password
										{...field}
										label="Stall name (required)"
										helperText="e.g. Smith Hill Primary School Sausage Sizzle"
									/>
								)}
							/>
						</FormGroup>

						{errors.name !== undefined && <FormFieldValidationError error={errors.name} />}
					</FormControl>,
				)}

				{getFormFieldComponent(
					'description',
					'Stall description',
					pollingPlace,
					pollingPlace.stall?.description,
					<FormControl fullWidth={true} component="fieldset" variant="outlined">
						<FormGroup>
							<Controller
								name="description"
								control={control}
								render={({ field }) => (
									<TextFieldWithout1Password
										{...field}
										label="Description (required)"
										helperText="Who's running it and why you're running it e.g. The P&C is running the stall to raise funds for the Year 7 school camp"
										multiline
									/>
								)}
							/>
						</FormGroup>

						{errors.description !== undefined && <FormFieldValidationError error={errors.description} />}
					</FormControl>,
				)}

				{getFormFieldComponent(
					'opening_hours',
					'Opening hours',
					pollingPlace,
					pollingPlace.stall?.opening_hours,
					<FormControl fullWidth={true} component="fieldset" variant="outlined">
						<FormGroup>
							<Controller
								name="opening_hours"
								control={control}
								render={({ field }) => (
									<TextFieldWithout1Password {...field} label="Opening hours" helperText="e.g. 8AM - 2PM" />
								)}
							/>
						</FormGroup>

						{errors.opening_hours !== undefined && <FormFieldValidationError error={errors.opening_hours} />}
					</FormControl>,
				)}

				{getFormFieldComponent(
					'website',
					'Website or social media page link',
					pollingPlace,
					pollingPlace.stall?.website,
					<FormControl fullWidth={true} component="fieldset" variant="outlined">
						<FormGroup>
							<Controller
								name="website"
								control={control}
								render={({ field }) => (
									<TextFieldWithout1Password
										{...field}
										label="Website or social media page link"
										helperText="We'll include a link to your site as part of your stall's information"
									/>
								)}
							/>
						</FormGroup>

						{errors.website !== undefined && <FormFieldValidationError error={errors.website} />}
					</FormControl>,
				)}

				{/* @TODO Is this only for admins, hence not needing the edit merger? */}
				<FormControl fullWidth={true} sx={{ mb: 2 }} component="fieldset" variant="outlined">
					<FormGroup>
						<Controller
							name="extra_info"
							control={control}
							render={({ field }) => (
								<TextFieldWithout1Password
									{...field}
									label="Extra information"
									helperText="Is there any other information to add that doesn't relate to what's on offer at the stall?"
								/>
							)}
						/>
					</FormGroup>

					{errors.extra_info !== undefined && <FormFieldValidationError error={errors.extra_info} />}
				</FormControl>
				{/* ######################
							Stall Details (End)
					###################### */}

				{/* ######################
							Metadata
					###################### */}
				<Typography
					gutterBottom
					variant="h6"
					component="div"
					sx={{ mt: 2, mb: 2, borderTop: `3px solid ${mapaThemePrimaryGrey}` }}
				>
					Metadata
				</Typography>

				<FormControl fullWidth={true} sx={{ mb: 2 }} component="fieldset" variant="outlined">
					<FormGroup>
						<Controller
							name="source"
							control={control}
							render={({ field }) => (
								<TextFieldWithout1Password
									{...field}
									label="Source of the report"
									helperText="Where did this report come frm? (e.g. Twitter, Facebook, School Newsletter)"
								/>
							)}
						/>
					</FormGroup>

					{errors.source !== undefined && <FormFieldValidationError error={errors.source} />}
				</FormControl>

				<List
					component="div"
					disablePadding
					sx={{
						// A bit extra margin bottom here to allow for the presence of <AppBar> pinned at the bottom of the screen
						mb: 3,
					}}
				>
					<ListItemButton sx={{ pt: 0, pb: 0, pl: 4 }} onClick={onClickFavourite}>
						<ListItemIcon>{favourited === false ? <StarBorder /> : <Star color="primary" />}</ListItemIcon>

						<ListItemText
							primary="Favourite this polling place"
							secondary="This adds the polling place to the list of booths we can feature on social media."
						/>
					</ListItemButton>
				</List>
				{/* ######################
							Metadata (End)
					###################### */}

				<AppBar position="fixed" color="transparent" sx={{ top: 'auto', bottom: 0, backgroundColor: 'white' }}>
					<Toolbar sx={{ justifyContent: 'flex-end' }}>
						<Button
							size="small"
							color="primary"
							// endIcon={<LooksOne />}
							// onClick={onClickSubmit}
						>
							Sub 1
						</Button>

						<Button
							size="small"
							color="primary"
							// endIcon={<LooksOne />}
							// onClick={onClickSubmit}
						>
							Sub 2
						</Button>

						<Button
							loading={isSaving}
							loadingPosition="end"
							disabled={isDirty === false}
							size="small"
							color="primary"
							endIcon={<Save />}
							onClick={onClickSubmit}
						>
							{/* See the note re browser crashes when translating pages: https://mui.com/material-ui/react-button/#loading-button */}
							<span>Save</span>
						</Button>

						{pollingPlace.stall !== null && (
							<Button
								loading={isDeleting}
								loadingPosition="end"
								disabled={pollingPlace.stall === null}
								size="small"
								color="primary"
								endIcon={<Delete />}
								onClick={onClickDelete}
								sx={{ ml: 1 }}
							>
								{/* See the note re browser crashes when translating pages: https://mui.com/material-ui/react-button/#loading-button */}
								<span>Delete</span>
							</Button>
						)}
					</Toolbar>
				</AppBar>
			</form>

			{isDeleteConfirmDialogShown === true && (
				<Dialog open={true} onClose={onCancelDelete} fullWidth>
					<DialogTitle>Delete polling place noms?</DialogTitle>
					<DialogActions>
						<Button onClick={onCancelDelete}>No</Button>
						<Button onClick={onConfirmDelete}>Yes</Button>
					</DialogActions>
				</Dialog>
			)}

			<Snackbar open={isErrorSnackbarShown} autoHideDuration={6000} onClose={onSnackbarClose}>
				<Alert severity="error" variant="standard" sx={{ width: '100%' }}>
					One or more fields have errors.
				</Alert>
			</Snackbar>
		</PageWrapper>
	);
}
