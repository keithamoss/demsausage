[supervisord]
nodaemon=true
logfile=/app/logs/supervisord.log


[program:gunicorn_a]
# Directory where your site's project files are located
directory=/app

command=gunicorn demsausage.wsgi -c /app/gunicorn.conf.py --bind 0.0.0.0:8000

# Number of processes to startup, roughly the number of CPUs you have
numprocs=1

# Give each process a unique name so they can be told apart
# Not relevant when we're only running one process, but left in
process_name=demsausage_gunicorn_a%(process_num)d

# Automatically start and recover processes
autostart=true
autorestart=true
# How long it needs to be up for to be considered "running"
startsecs=5

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs=10

; Causes supervisor to send the termination signal (SIGTERM) to the whole process group.
stopasgroup=true

# Choose where you want your log to go
stdout_logfile=/app/logs/demsausage_gunicorn_a.log
redirect_stderr=true


[program:gunicorn_b]
# Directory where your site's project files are located
directory=/app

command=gunicorn demsausage.wsgi -c /app/gunicorn.conf.py --bind 0.0.0.0:8001

# Number of processes to startup, roughly the number of CPUs you have
numprocs=1

# Give each process a unique name so they can be told apart
# Not relevant when we're only running one process, but left in
process_name=demsausage_gunicorn_b%(process_num)d

# Automatically start and recover processes
autostart=true
autorestart=true
# How long it needs to be up for to be considered "running"
startsecs=5

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs=10

; Causes supervisor to send the termination signal (SIGTERM) to the whole process group.
stopasgroup=true

# Choose where you want your log to go
stdout_logfile=/app/logs/demsausage_gunicorn_b.log
redirect_stderr=true


[program:demsausage_python_rq]
; Point the command to the specific rq command you want to run.
; If you use virtualenv, be sure to point it to
; /path/to/virtualenv/bin/rq
; Also, you probably want to include a settings module to configure this
; worker.  For more info on that, see http://python-rq.org/docs/workers/
command=python manage.py rqworker --with-scheduler cache_hydration
; process_num is required if you specify >1 numprocs
process_name=%(program_name)s-%(process_num)s

; If you want to run more than one worker instance, increase this
# 1 for the cache hydration queue
numprocs=1

; This is the directory from which RQ is ran. Be sure to point this to the
; directory where your source code is importable from
directory=/app

; RQ requires the TERM signal to perform a warm shutdown. If RQ does not die
; within 10 seconds, supervisor will forcefully kill it
stopsignal=TERM

; These are up to you
autostart=true
autorestart=true

# How long it needs to be up for to be considered "running"
startsecs=5

# Choose where you want your log to go
stdout_logfile=/app/logs/demsausage_python_rq_workers.log
redirect_stderr=True