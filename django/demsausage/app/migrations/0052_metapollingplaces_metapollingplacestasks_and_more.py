# Generated by Django 4.2.19 on 2025-04-07 12:55

from collections import Counter

import demsausage.app.enums
import simple_history.models
from demsausage.app.enums import (
    MetaPollingPlaceTaskCategory,
    MetaPollingPlaceTaskType,
    PollingPlaceState,
    PollingPlaceStatus,
)
from demsausage.app.models import (
    MetaPollingPlaces,
    MetaPollingPlacesTasks,
    PollingPlaces,
)
from demsausage.app.sausage.polling_places import find_by_distance

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def create_mpp(
    id, name, premises, jurisdiction, overseas, geom_location, wheelchair_access
):
    # Create the MPP
    mpp = MetaPollingPlaces(
        name=name,
        premises=premises,
        jurisdiction=jurisdiction,
        overseas=overseas,
        geom_location=geom_location,
        wheelchair_access=wheelchair_access,
    )

    try:
        mpp.full_clean()
    except Exception as e:
        print(
            f"Error creating MPP: {name} (#{id}) ({premises}) - {jurisdiction} - {overseas} - {wheelchair_access}"
        )
        raise e
    mpp.save(force_insert=True)

    # Create the MPP Task
    mpp_task = MetaPollingPlacesTasks(
        meta_polling_place=mpp,
        job_name="Initial Load",
        category=MetaPollingPlaceTaskCategory.REVIEW,
        type=MetaPollingPlaceTaskType.REVIEW_DRAFT,
    )

    try:
        mpp_task.full_clean()
    except Exception as e:
        print(f"Error creating MPP Task")
        raise e
    mpp_task.save(force_insert=True)

    return mpp


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("app", "0051_pollingplaces_chance_of_sausage_stats"),
    ]

    def populate_meta_polling_places(apps, schema_editor):
        matched_ids = []
        output = []

        total_pps = PollingPlaces.objects.filter(
            status=PollingPlaceStatus.ACTIVE
        ).count()
        print(f"\nPollingPlaces count: {total_pps}\n")

        for pp in (
            PollingPlaces.objects.filter(status=PollingPlaceStatus.ACTIVE)
            .filter(meta_polling_place=None)
            .order_by("-election__election_day", "id")
        ):
            if pp.id not in matched_ids:
                # Find matching polling places within 100m
                matching_polling_places = find_by_distance(
                    pp.geom,
                    0.1,
                    limit=None,
                    qs=PollingPlaces.objects.filter(
                        status=PollingPlaceStatus.ACTIVE
                    ).exclude(id=pp.id),
                ).order_by("election__election_day")

                pp_ids = [pp.id] + [
                    i.id for i in matching_polling_places if i.id not in matched_ids
                ]

                output.append(pp_ids)

                # Create the MPP and its Task
                mpp = create_mpp(
                    pp.id,
                    pp.name,
                    pp.premises if pp.premises is not None else pp.name,
                    pp.state if pp.state != PollingPlaceState.Overseas else None,
                    pp.state == PollingPlaceState.Overseas,
                    pp.geom,
                    pp.wheelchair_access,
                )

                # Link matching PPs to the new MPP
                PollingPlaces.objects.filter(id__in=pp_ids).update(
                    meta_polling_place=mpp,
                )

                matched_ids.extend(pp_ids)

        # Warn on MPPs with a large number of PPs
        for matching_polling_places in output:
            if len(matching_polling_places) >= 13:
                print(
                    f"Found {len(matching_polling_places)} matching polling places for {PollingPlaces.objects.get(id=matching_polling_places[0]).premises}"
                )

        # Report on outcomes
        print(f"\nMPPs: {len(output)}")

        total_items = sum(
            len(matching_polling_places) for matching_polling_places in output
        )
        print(f"Total items in child lists: {total_items}")

        single_item_count = sum(
            1 for matching_polling_places in output if len(matching_polling_places) == 1
        )
        print(f"Number of sub lists with only one item: {single_item_count}")

        if total_items != total_pps:
            print("Mismatch found between MPP count and PP count")
            raise Exception()

        # Check if any PP ID appears more than once in the MPPs list
        all_ids = [id for sublist in output for id in sublist]
        id_counts = Counter(all_ids)

        duplicates = {id: count for id, count in id_counts.items() if count > 1}
        if duplicates:
            print("\nDuplicate IDs found:")
            for id, count in duplicates.items():
                print(f"  ID {id} appears {count} times")
            raise Exception()
        else:
            print("\nNo duplicate IDs found")

        # Check that no PPs are left unattached
        if (
            PollingPlaces.objects.filter(status=PollingPlaceStatus.ACTIVE)
            .filter(meta_polling_place=None)
            .count()
            != 0
        ):
            print(
                f"\nThere are {PollingPlaces.objects.filter(status=PollingPlaceStatus.ACTIVE).filter(meta_polling_place=None).count()} unattached PPs"
            )
            raise Exception()

    operations = [
        migrations.CreateModel(
            name="MetaPollingPlaces",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceStatus["ACTIVE"],
                                "Active",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceStatus["RETIRED"],
                                "Retired",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceStatus["DRAFT"],
                                "Draft",
                            ),
                        ],
                        default=demsausage.app.enums.MetaPollingPlaceStatus["DRAFT"],
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.TextField()),
                ("premises", models.TextField(blank=True)),
                ("address_1", models.TextField(blank=True)),
                ("address_2", models.TextField(blank=True)),
                ("address_3", models.TextField(blank=True)),
                ("locality", models.TextField(blank=True)),
                (
                    "jurisdiction",
                    models.TextField(
                        blank=True,
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "NSW"
                                ],
                                "NSW",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "VIC"
                                ],
                                "VIC",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "QLD"
                                ],
                                "QLD",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction["WA"],
                                "WA",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction["SA"],
                                "SA",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "TAS"
                                ],
                                "TAS",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "ACT"
                                ],
                                "ACT",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction["NT"],
                                "NT",
                            ),
                        ],
                        null=True,
                    ),
                ),
                ("postcode", models.TextField(blank=True, max_length=4)),
                ("overseas", models.BooleanField()),
                (
                    "geom_location",
                    django.contrib.gis.db.models.fields.PointField(
                        geography=True, srid=4326
                    ),
                ),
                (
                    "geom_boundary",
                    django.contrib.gis.db.models.fields.PolygonField(
                        blank=True, geography=True, null=True, srid=4326
                    ),
                ),
                (
                    "wheelchair_access",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.PollingPlaceWheelchairAccess[
                                    "NONE"
                                ],
                                "None",
                            ),
                            (
                                demsausage.app.enums.PollingPlaceWheelchairAccess[
                                    "ASSISTED"
                                ],
                                "Assisted",
                            ),
                            (
                                demsausage.app.enums.PollingPlaceWheelchairAccess[
                                    "FULL"
                                ],
                                "Full",
                            ),
                            (
                                demsausage.app.enums.PollingPlaceWheelchairAccess[
                                    "UNKNOWN"
                                ],
                                "Unknown",
                            ),
                        ]
                    ),
                ),
                ("wheelchair_access_description", models.TextField(blank=True)),
                ("chance_of_sausage", models.JSONField(blank=True, default=dict)),
                (
                    "facility_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.pollingplacefacilitytype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MetaPollingPlacesTasks",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskStatus[
                                    "IN_PROGRESS"
                                ],
                                "In Progress",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskStatus[
                                    "COMPLETED"
                                ],
                                "Completed",
                            ),
                        ],
                        default=demsausage.app.enums.MetaPollingPlaceTaskStatus[
                            "IN_PROGRESS"
                        ],
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("job_name", models.TextField()),
                (
                    "category",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskCategory[
                                    "REVIEW"
                                ],
                                "Review",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskCategory["QA"],
                                "QA",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskCategory[
                                    "ENRICHMENT"
                                ],
                                "Enrichment",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskCategory[
                                    "CROWDSOURCING"
                                ],
                                "Crowdsourcing",
                            ),
                        ]
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskType[
                                    "REVIEW_DRAFT"
                                ],
                                "Review Draft",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskType[
                                    "CROWDSOURCE_FROM_FACEBOOK"
                                ],
                                "Crowdsource from Facebook",
                            ),
                        ]
                    ),
                ),
                (
                    "outcome",
                    models.TextField(
                        blank=True,
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskOutcome[
                                    "COMPLETED"
                                ],
                                "Completed",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskOutcome[
                                    "CLOSED"
                                ],
                                "Closed",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskOutcome[
                                    "DEFERRED"
                                ],
                                "Deferred",
                            ),
                        ],
                    ),
                ),
                ("actioned_on", models.DateTimeField(blank=True, null=True)),
                (
                    "actioned_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "meta_polling_place",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.metapollingplaces",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MetaPollingPlacesRemarks",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                ("text", models.TextField()),
                (
                    "meta_polling_place",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.metapollingplaces",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MetaPollingPlacesLinks",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "type",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceLinkType[
                                    "OFFICIAL"
                                ],
                                "Official Website",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceLinkType[
                                    "FACEBOOK"
                                ],
                                "Facebook",
                            ),
                        ]
                    ),
                ),
                ("url", models.URLField()),
                (
                    "meta_polling_place",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.metapollingplaces",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MetaPollingPlacesContacts",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("modified_on", models.DateTimeField(auto_now=True, null=True)),
                (
                    "type",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceContactType[
                                    "EMAIL"
                                ],
                                "Email",
                            )
                        ]
                    ),
                ),
                ("contact_email", models.EmailField(max_length=254)),
                (
                    "category",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceContactCategory[
                                    "PRIMARY"
                                ],
                                "Primary",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceContactCategory[
                                    "SECONDRY"
                                ],
                                "Secondary",
                            ),
                        ]
                    ),
                ),
                (
                    "meta_polling_place",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="app.metapollingplaces",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalMetaPollingPlacesTasks",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskStatus[
                                    "IN_PROGRESS"
                                ],
                                "In Progress",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskStatus[
                                    "COMPLETED"
                                ],
                                "Completed",
                            ),
                        ],
                        default=demsausage.app.enums.MetaPollingPlaceTaskStatus[
                            "IN_PROGRESS"
                        ],
                    ),
                ),
                ("created_on", models.DateTimeField(blank=True, editable=False)),
                ("job_name", models.TextField()),
                (
                    "category",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskCategory[
                                    "REVIEW"
                                ],
                                "Review",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskCategory["QA"],
                                "QA",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskCategory[
                                    "ENRICHMENT"
                                ],
                                "Enrichment",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskCategory[
                                    "CROWDSOURCING"
                                ],
                                "Crowdsourcing",
                            ),
                        ]
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskType[
                                    "REVIEW_DRAFT"
                                ],
                                "Review Draft",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskType[
                                    "CROWDSOURCE_FROM_FACEBOOK"
                                ],
                                "Crowdsource from Facebook",
                            ),
                        ]
                    ),
                ),
                (
                    "outcome",
                    models.TextField(
                        blank=True,
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskOutcome[
                                    "COMPLETED"
                                ],
                                "Completed",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskOutcome[
                                    "CLOSED"
                                ],
                                "Closed",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceTaskOutcome[
                                    "DEFERRED"
                                ],
                                "Deferred",
                            ),
                        ],
                    ),
                ),
                ("actioned_on", models.DateTimeField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "actioned_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "meta_polling_place",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="app.metapollingplaces",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical meta polling places tasks",
                "verbose_name_plural": "historical meta polling places taskss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMetaPollingPlacesRemarks",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_on", models.DateTimeField(blank=True, editable=False)),
                (
                    "modified_on",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                ("text", models.TextField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "meta_polling_place",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="app.metapollingplaces",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical meta polling places remarks",
                "verbose_name_plural": "historical meta polling places remarkss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMetaPollingPlacesLinks",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_on", models.DateTimeField(blank=True, editable=False)),
                (
                    "modified_on",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceLinkType[
                                    "OFFICIAL"
                                ],
                                "Official Website",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceLinkType[
                                    "FACEBOOK"
                                ],
                                "Facebook",
                            ),
                        ]
                    ),
                ),
                ("url", models.URLField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "meta_polling_place",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="app.metapollingplaces",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical meta polling places links",
                "verbose_name_plural": "historical meta polling places linkss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMetaPollingPlacesContacts",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_on", models.DateTimeField(blank=True, editable=False)),
                (
                    "modified_on",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceContactType[
                                    "EMAIL"
                                ],
                                "Email",
                            )
                        ]
                    ),
                ),
                ("contact_email", models.EmailField(max_length=254)),
                (
                    "category",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceContactCategory[
                                    "PRIMARY"
                                ],
                                "Primary",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceContactCategory[
                                    "SECONDRY"
                                ],
                                "Secondary",
                            ),
                        ]
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "meta_polling_place",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="app.metapollingplaces",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical meta polling places contacts",
                "verbose_name_plural": "historical meta polling places contactss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMetaPollingPlaces",
            fields=[
                (
                    "id",
                    models.IntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceStatus["ACTIVE"],
                                "Active",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceStatus["RETIRED"],
                                "Retired",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceStatus["DRAFT"],
                                "Draft",
                            ),
                        ],
                        default=demsausage.app.enums.MetaPollingPlaceStatus["DRAFT"],
                    ),
                ),
                ("created_on", models.DateTimeField(blank=True, editable=False)),
                (
                    "modified_on",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                ("name", models.TextField()),
                ("premises", models.TextField(blank=True)),
                ("address_1", models.TextField(blank=True)),
                ("address_2", models.TextField(blank=True)),
                ("address_3", models.TextField(blank=True)),
                ("locality", models.TextField(blank=True)),
                (
                    "jurisdiction",
                    models.TextField(
                        blank=True,
                        choices=[
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "NSW"
                                ],
                                "NSW",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "VIC"
                                ],
                                "VIC",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "QLD"
                                ],
                                "QLD",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction["WA"],
                                "WA",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction["SA"],
                                "SA",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "TAS"
                                ],
                                "TAS",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction[
                                    "ACT"
                                ],
                                "ACT",
                            ),
                            (
                                demsausage.app.enums.MetaPollingPlaceJurisdiction["NT"],
                                "NT",
                            ),
                        ],
                        null=True,
                    ),
                ),
                ("postcode", models.TextField(blank=True, max_length=4)),
                ("overseas", models.BooleanField()),
                (
                    "geom_location",
                    django.contrib.gis.db.models.fields.PointField(
                        geography=True, srid=4326
                    ),
                ),
                (
                    "geom_boundary",
                    django.contrib.gis.db.models.fields.PolygonField(
                        blank=True, geography=True, null=True, srid=4326
                    ),
                ),
                (
                    "wheelchair_access",
                    models.TextField(
                        choices=[
                            (
                                demsausage.app.enums.PollingPlaceWheelchairAccess[
                                    "NONE"
                                ],
                                "None",
                            ),
                            (
                                demsausage.app.enums.PollingPlaceWheelchairAccess[
                                    "ASSISTED"
                                ],
                                "Assisted",
                            ),
                            (
                                demsausage.app.enums.PollingPlaceWheelchairAccess[
                                    "FULL"
                                ],
                                "Full",
                            ),
                            (
                                demsausage.app.enums.PollingPlaceWheelchairAccess[
                                    "UNKNOWN"
                                ],
                                "Unknown",
                            ),
                        ]
                    ),
                ),
                ("wheelchair_access_description", models.TextField(blank=True)),
                ("chance_of_sausage", models.JSONField(blank=True, default=dict)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "facility_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="app.pollingplacefacilitytype",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical meta polling places",
                "verbose_name_plural": "historical meta polling placess",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name="pollingplaces",
            name="meta_polling_place",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="app.metapollingplaces",
            ),
        ),
        migrations.RunPython(populate_meta_polling_places),
    ]
