name: Docker

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to Docker Hub (again)
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      - name: Extract metadata (tags, labels) for Docker
        id: meta1
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: keithmoss/sausage-nginx (sausage-nginx)

      - name: Extract metadata (tags, labels) for Docker (sausage2-nginx)
        id: meta2
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: keithmoss/sausage2-nginx

      # Let's get setup with Node
      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"

      #       - name: Install homebrew
      #         run: |
      #           sudo apt-get update
      #           sudo apt-get install libnss3-tools
      #           /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
      #           # Add Homebrew to path
      #           # c.f. https://github.community/t5/GitHub-Actions/Installing-Homebrew-on-Linux/td-p/51916
      #           echo "/home/linuxbrew/.linuxbrew/bin" >> $GITHUB_PATH

      #       - name: Setup local dev certs
      #         run: |
      #           brew install mkcert
      #           mkcert -install
      #           mkdir dev-certs
      #           cd dev-certs
      #           mkcert localhost
      #           cd ../

      # So we can daemonise yarn start
      #     - run: sudo yarn global add pm2

      - name: Do something with env files
        env:
          SAUSAGE_PUBLIC_FRONTEND_PROD_ENV: ${{ secrets.SAUSAGE_PUBLIC_FRONTEND_PROD_ENV }}
          SAUSAGE_PUBLIC_REDESIGN_FRONTEND_PROD_ENV: ${{ secrets.SAUSAGE_PUBLIC_REDESIGN_FRONTEND_PROD_ENV }}
          SAUSAGE_ADMIN_FRONTEND_PROD_ENV: ${{ secrets.SAUSAGE_ADMIN_FRONTEND_PROD_ENV }}
          SAUSAGE_WEB_PROD_LOCAL_ENV: ${{ secrets.SAUSAGE_WEB_PROD_LOCAL_ENV }}
          SAUSAGE_DB_DEV_ENV: ${{ secrets.SAUSAGE_DB_DEV_ENV }}
          REDIS_ENV: ${{ secrets.REDIS_ENV }}
          SAUSAGE_WEB_DEV_ENV: ${{ secrets.SAUSAGE_WEB_DEV_ENV }}
          SAUSAGE_WEB_DB_DEV_ENV: ${{ secrets.SAUSAGE_WEB_DB_DEV_ENV }}
        run: |
          mkdir secrets
          echo $SAUSAGE_PUBLIC_FRONTEND_PROD_ENV > secrets/sausage-public-frontend.prod.env
          echo $SAUSAGE_PUBLIC_REDESIGN_FRONTEND_PROD_ENV > secrets/sausage-public-redesign-frontend.prod.env
          echo $SAUSAGE_ADMIN_FRONTEND_PROD_ENV > secrets/sausage-admin-frontend.prod.env
          echo $SAUSAGE_WEB_PROD_LOCAL_ENV > secrets/sausage-web.prod-local.env
          echo $SAUSAGE_DB_DEV_ENV > secrets/sausage-db.dev.env
          echo $REDIS_ENV > secrets/redis.env
          echo $SAUSAGE_WEB_DEV_ENV > secrets/sausage-web.dev.env
          echo $SAUSAGE_WEB_DB_DEV_ENV > secrets/sausage-web-db.dev.env

      - name: Docker version
        run: docker --version

      - name: Docker Compose version
        run: docker-compose --version

      - name: Build prep
        run: |
          pwd
          mkdir ./build
          mkdir ./nginx-prod/build

      # - name: Public Frontend - Install
      #   run: yarn install
      #   working-directory: public

      # - name: Public Frontend - Build
      #   run: ./build.sh
      #   working-directory: public

      # - name: Public Admin - Install
      #   run: yarn install
      #   working-directory: admin

      # - name: Public Admin - Build
      #   run: ./build.sh
      #   working-directory: admin

      # - name: Public Redesign Frontend - Install
      #   run: yarn install
      #   working-directory: public-redesign

      # - name: Public Redesign Frontend - Build
      #   run: ./build.sh
      #   working-directory: public-redesign

      # - name: Public Redesign Frontend - Build
      #   run: |
      #     rm -rf ./build
      #     mkdir -p ./build
      #     yarn run build
      #   working-directory: public-redesign

      # - name: Public Redesign Frontend - Move build assets
      #   run: |
      #     ls -l ./nginx-prod/build/
      #     cp ./public-redesign/frontend-public-redesign.tgz ./nginx-prod/build/demsausage-redesign.tgz
      #     ls -l ./nginx-prod/build/

      # - name: Public Redesign Frontend - Build assets
      #   run: |
      #     tar czvf ./build/frontend-public-redesign.tgz ./public-redesign/build/
      #     ls -l ./build

      # - name: Prodbuild public-redesign frontend
      #   run: ./prodbuild.sh frontend

      # - name: Prodbuild-dockerpush
      #   run: sudo ./prodbuild-dockerpush.sh frontend

      - name: Django - Build Static Assets
        run: |
          pwd
          ls -l ./secrets
          echo "Building..."
          docker-compose -f build.yml build django
          pwd
          ls -l ./secrets
          echo "Running..."
          docker-compose -f build.yml run django

      # - name: Prodbuild-nginx
      #   run: |
      #     ls -l ./nginx-prod/build/
      #     sudo ./prodbuild-nginx.sh

      # - name: Docker push
      #   run: |
      #     docker tag sausage2/nginx:latest keithmoss/sausage2-nginx:latest
      #     docker push keithmoss/sausage2-nginx:latest

    # Start daemonised local dev

#     - run: pm2 start node_modules/react-scripts/scripts/start.js --name react-app

# Screenshot the landing page
#     - name: Take photo of our local build
#       uses: "lannonbr/puppeteer-screenshot-action@1.3.0"
#       with:
# #         url: https://localhost:3000
#         url: https://trove.keithmoss.me
